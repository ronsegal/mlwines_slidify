x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
cor(x,y)
stat.desc(x)
library(pastecs)
stat.desk(x)
stat.desc(x)
stat.desc(y)
-0.27644(1.0409205/0.16799802)
-0.27644*(1.0409205/0.16799802)
lm(y~x)
lm(y~x)$coef
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
stat.desc(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
std(x)
sd(x)
sd(y)
mean(x)
mean(y)
lm(x,y)
lm(y,x)
lm(x~y)
lm(y~x)
cor(y,x)
sd(x)/sd(y)
sd(y)/sd(x)
var(x)
var(y)/var(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(Y~x)
lm(y~x)
lm(x~y)
install.packages("ggplot2")
install.packages("knitr")
install.packages("dplyr")
install.packages("lubridate")
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y~x)
summary(lm(y~x))
rstandard(lm(y~x))
?rstandard
summary(rstandard(lm(y~x)))
rstandard(lm(y~x))
std(rstandard(lm(y~x)))
sd(rstandard(lm(y~x)))
resid(lm(y~x)))
resid(lm(y~x))
sd(resid(lm(y~x)))
2/sd(resid(lm(y~x)))
mtcars
lm(wt~mpg, data=mtcars)
lm(mpg~wt, data=mtcars)
summary(lm(mpg~wt, data=mtcars))
mean(mtcars$wt)
summary(lm(mpg~wt, data=mtcars))$coef
data.frame(wt=mean(mtcars$wt))
dta<-data.frame(wt=mean(mtcars$wt))
lin<-lm(mpg~wt, data=mtcars)
predict(lin,dta,interval=("confidence"))
?predict
data(mtcars)
fit<-lm(mpg~wt, data-mtcars)
fit<-lm(mpg~wt, data=mtcars)
newdata<-data.frame(wt=3)
predict(fit, newdata, interval=("confidence"))
predict(fit, newdata, interval=("prediction"))
newdata<-data.frame(wt=2)
predict(fit, newdata, interval=("prediction"))
mtcars$wt_ton <- mtcars$wt / 2
View(mtcars)
View(mtcars)
fit<-lm(mpg~wt_ton, data=mtcars)
fit
summary(fit)
coef(summary(fit))
coef[2,1]
coef<-coef(summary(fit))
coef[2,1]
fit$df
fit$df.residual
qt
coef[-1,1]
coef
mean(mtcars$wt_ton)
fit<-lm(mpg~wt_ton, data=mtcars)
newdata<-data.frame(wt_ton=2)
predict(fit,newdata, interval-"confidence")
predict(fit,newdata, interval="confidence")
summary(fit)$coefficients
fit<-lm(mpg~wt_ton, data=mtcars)
fitsum<-summary(fit)$coefficients
fitsum[2,1]
fitsum[2,2]
fit$df
c(-1,1)
tmp<-qt(0.975,df=30) * 1.118202
tmp
c(-1,1) * tmp
tmp<-c(-1,1) * tmp
tmp
-10.68894 * tmp
mtcars$wt_ton <- mtcars$wt / 2
fit<-lm(mpg~wt_ton, data=mtcars)
summary(fit)
tmp<-qt(0.975, df=30) * 1.118
tmp<-tmp * c(-1,1)
-10.689 + tmp
x
z = x + 0.2
z
summary(lm(y~x))
summary(lm(y~z))
lm(y~x)
lm(y~z)
lm(mpg~wt, data=mtcars)
fit<-lm(mpg~wt, data=mtcars)
fitintercept<-lm(mpg~1, data=mtcars)
fitintercept
fit$residuals
fitintercept$residuals
fit<-lm(mpg~wt, data=mtcars)
summary(fit)
mean(mtcars$mpg)
library(ggplot2)
source('R:/BigData/Data Science Course/RegMod/ggcorplot.R')
source('R:/BigData/Data Science Course/RegMod/ggcorplot.R')
source('R:/BigData/Data Science Course/RegMod/ggcorplot.R')
ggcorplot(data=mtcars[1:4],)
ggcorplot(data=mtcars[1:4], var_text_size=5, cor_text_limits=c(5,10))
ggcorplot(data=mtcars[1:4], var_text_size=5, cor_text_limits=c(5,10))
source('R:/BigData/Data Science Course/RegMod/ggcorplot.R')
data = my_data
source('R:/BigData/Data Science Course/RegMod/ggcorplot.R')
ggcorplot(data=mtcars[1:4], var_text_size=5, cor_text_limits=c(5,10))
ggcorplot(data=mtcars[1:4], var_text_size=5, cor_text_limits=c(5,10))
ggcorplot(data=mtcars[1:7], var_text_size=5, cor_text_limits=c(5,10))
splom(~mtcars[1:7])
library(lattice)
splom(~mtcars[1:7])
install.packages("car")
install.packages("car")
library (lmtest)
hccm
library(car)
hccm
data.frame(mtcards)
data.frame(mtcars)
data(mtcars)
data.frame(mtcars)
hccm(mtcars)
lm(mpg~., data-mtcars)
View(mtcars)
lm(mpg~., data-mtcars)
shapiro.test(mtcars@mpg)
shapiro.test(mtcars
$mpg)
```{r, echo=TRUE}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("MiKTeX")
lm(mpg~disp+hp+wt+am+drat, data=mtcars)
dchp(lm(mpg~disp+hp+wt+am+drat, data=mtcars))
hccm(lm(mpg~disp+hp+wt+am+drat, data=mtcars))
hccm(lm(mpg~disp+hp+wt+amAuto+drat, data=mtcars))
hccm(lm(mpg~disp+hp+wt+am+drat, data=mtcars))
fit<-lm(mpg~disp+hp+wt+am+drat, data=mtcars)
outliertest(fit)
outlierTest(fit)
qqPlot(fit, main="QQ Plot")
fit<-lm(mpg~wt+am, data=mtcars)
qqPlot(fit, main="QQ Plot")
outlierTest(fit)
shapiro.test(fit)
library(MASS)
studres(fit)
sresid<-studres(fit)
hist(sresid, freq=FALSE,
main="Distribution of Studentized Residuals")
xfit<-seq(min(sresid),max(sresid),length=40)
yfit<-dnorm(xfit)
lines(xfit, yfit)
nvcTest(fit)
ncvTest(fit)
str(mtcars)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
lmp(fit)
# Function to extract the overall ANOVA p-value out of a linear model object
lmp <- function (modelobject) {
if (class(modelobject) != "lm") stop("Not an object of class 'lm' ")
f <- summary(modelobject)$fstatistic
p <- pf(f[1],f[2],f[3],lower.tail=F)
attributes(p) <- NULL
return(p)
}
lmp(fit)
sm["termname", "Pr(>|t|)"]
coef(sm)["termname", "Pr(>|t|)"]
sm
coeff(sm)["termname", "Pr(>|t|)"]
coefficients(sm)["termname", "Pr(>|t|)"]
coefficients(sm)
coefficients(sm)[Pr(>|t|)"]
coefficients(sm)["Pr(>|t|)"]
(sm)["Pr(>|t|)"]
(sm)$["Pr(>|t|)"]
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
qqline(resid(fit))
qqline(resid(fit))
plot(density(resid(fit)))
qqnorm(resid(fit))
qqline(resid(fit))
t.test(mpg~am)
t.test(mpg~am, data=mtcars)
t.test(mpg~am, data=mtcars, alternative=c("greater"), conf.level=0.95)
install.packages("MASS")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
step$anova
(step$anova)$final
(step$anova)$Final Model
(step$anova)$Final
summary(step$anova)
summary fit
summary(fit)
?stepAIC
attr(terms(step$anova), "Final Model")
attr((step$anova), "Final Model")
formula(step)
source('~/.active-rstudio-document', echo=TRUE)
summary(fit)
?attributes
sm[4,1]
sm[4]
sm[4,0]
sm[1,4]
attributes(sm[4])
sm[4][1]
sm[4]$Estimate
sm[4]$amManual
sm
sm[1]
sm[2]
sm[3]
sm[4]
sm[5]
sm[6]
sm[7]
sm[8]
sm[9]
sm[10]
sm[11]
sm[12]
sm[13]
sm[14]
sm
data.frame(sm)
sm(model)$coefficients
summary(sm)$coefficients
(sm)$coefficients
(sm)$coefficients[1]
(sm)$coefficients[1,1]
(sm)$coefficients[2,1]
(sm)$coefficients[3,1]
(sm)$coefficients[2,0]
(sm)$coefficients[2,1]
(sm)$coefficients[amManual,1]
(sm)$coefficients[$amManual,1]
(sm)$coefficients$amManual
(sm)$coefficients
(sm)$coefficients[2,1]
(sm)$coefficients[2,2]
((sm)$coefficients)$amManual
((sm)$coefficients)$Estimate
tmp<-((sm)$coefficients)$Estimate
tmp<-((sm)$coefficients)
View(tmp)
View(tmp)
tmp$Estimate
tmp.Estimate
data.frame(tmp)
tmp<-data.frame(tmp)
tmp$Estimate
tmp$amManual
tmp$Estimate[2]
source('R:/BigData/Data Science Course/RegMod/ggcorplot.R', echo=TRUE)
View(mtcars)
View(mtcars)
View(mtcars)
View(mtcars)
summarise(no_rows=length(mtcars$am))
summarize(no_rows=length(mtcars$am))
summarise(no_rows=length(mtcars$am))
library(dplyr)
summarise(no_rows=length(mtcars$am))
summarise(mtcars, no_rows=length(am))
View(mtcars)
View(mtcars)
summarise(mtcars0, no_rows=length(am))
source('~/.active-rstudio-document', echo=TRUE)
t.test(mpg~am, data=mtcars)
coeffs[1]
coeffs[2]
coeffs[3]
coeffs[4]
coeffs[5]
coeffs[6]
sm[1]
sm[3]
sm[4]
sm[5]
sm[6]
sm[7]
sm[8]
sm[9]
sm[9]
sm[9][1]
sm[9][1]*100
sm[9]*100
as.numeric(sm[9])*100
install.packages("lmtest")
install.packages("lmtest")
install.packages("lmtest")
install.packages("car")
source('~/.active-rstudio-document', echo=TRUE)
t_test
t_test[1]
t_test[3]
t_test['p-value']
t_test[p-value]
t_test[$p.value]
t_test[$p.value]
$p.value
t_test.$p.value
t_test['$p.value']
t_test[3]
t_test$p.value
is.numeric(t_test$p.value)
as.numeric(t_test$p.value)
print("p value = ") as.numeric(t_test$p.value)
step$anova
step$anova['Final Model']
step$anova['Final Model:']
step$anova[3]
step$anova[2]
step$anova[1]
step$anova[9]
step$anova[5]
step$anova[6]
step$anova[4]
step$anova
step$anova[,1]
step$anova[,2]
step$anova[,3]
step$anova
durbinWatsonTest(fit)
durb<-durbinWatsonTest(fit)
durb[3]
durb
fit <- lm(mpg ~ as.factor(cyl) + wt, data=mtcars)
summary(fit)
View(mtcars)
fit2 <- lm(mpg ~ factor(cyl), mtcars)
summary(fit2)
fit2 <- lm(mpg ~ factor(cyl), mtcars0)
summary(fit2)
fit2 <- lm(mpg ~ as.factor(cyl), mtcars0)
summary(fit2)
fit3 <- lm(mpg ~ factor(cyl)*wt, mtcars0)
summary(fit3)
View(mtcars0)
fit3 <- lm(mpg ~ factor(cyl) + wt + interaction(cyl, wt), data = mtcars0)
summary(fit3)
data(mtcars)
fit <- lm(mpg ~ as.factor(cyl) + wt, data=mtcars)
summary(fit)
lrtest
library(epicalc)
install.packages("epicalc")
lrtest
lrtest
lmtest
install.packages("lmtest")
lmtest
library(lrtest)
library(lmtest)
fit3 <- lm(mpg ~ factor(cyl) + wt + interaction(cyl, wt), data = mtcars0)
lrtest(fit,fit3)
lr<-lrtest(fit,fit3)
summary(lr)
result <- anova(fit, fit3, test="Chi")
summary(result)
result$`Pr(>Chi)`
result$Pr
lr$`Pr(>Chisq)`
fit3 <- lm(mpg ~ as.factor(cyl)*wt, data=mtcars)
lr<-lrtest(fit,fit3)
lr$`Pr(>Chisq)`
result <- anova(fit, fit3, test="Chi")
result$`Pr(>Chi)`
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars))
?mtcars
summary(lm(mpg ~ I(wt * 1) + factor(cyl), data = mtcars))
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
summary(lm(y~x))
hat(lm(y~x))
hat(lm(y~x))
hatvalues(lm(y~x))
max(hatvalues(lm(y~x)))
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
dfbeta()
fit<-lm(y~x)
dfbeta(fit)
dfbeta(fit)
dfbeta(fit)[5,2]
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344
fit<-lm(y~x)
dfbeta(fit)[5,2]
dfbetas(fit)[5,2]
dfbetas(fit)
influence.measures(fit)$infmat[5, 'dfb.x']
read.arff('r:/BigData/Amazon project/amazon_initial_50_30_10000.arff')
install.packages("foreign")
read.arff('r:/BigData/Amazon project/amazon_initial_50_30_10000.arff')
library(foreign)
read.arff('r:/BigData/Amazon project/amazon_initial_50_30_10000.arff')
read.arff('r:/BigData/Amazon project/amazon_initial_50_30_10000.arff')
setwd("R:/BigData/Data Science Course/devdataprod-031")
author("mlwines_slidify")
library(slidify)
author("mlwines_slidify")
slidify("file.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
